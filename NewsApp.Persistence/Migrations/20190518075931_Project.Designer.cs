// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewsApp.Persistence;

namespace NewsApp.Persistence.Migrations
{
    [DbContext(typeof(NewsAppDbContext))]
    [Migration("20190518075931_Project")]
    partial class Project
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NewsApp.Domain.Entities.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleText");

                    b.Property<int?>("CategoryId");

                    b.Property<DateTime>("CreatingDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<int?>("JournalistUserId");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("ArticleId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("JournalistUserId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("NewsApp.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("NewsApp.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleId");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("UserId");

                    b.HasKey("CommentId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("NewsApp.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new { RoleId = 1, RoleName = "Admin" },
                        new { RoleId = 2, RoleName = "User" },
                        new { RoleId = 3, RoleName = "Journalist" }
                    );
                });

            modelBuilder.Entity("NewsApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int?>("RoleId");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasData(
                        new { UserId = 1, Email = "admin@test.com", FirstName = "Petr", LastName = "Petrov", Password = "kqebu1mlo+WWzcoVZ8XfWyt2xFk+6XFVm5dhqsMDxVY=", RoleId = 1 },
                        new { UserId = 2, Email = "user1@test.com", FirstName = "Anna", LastName = "Petrova", Password = "hvnV1nE/zbiszJ6F1OweDSBR0wFJkT+Y/9VSx2kMmtE=", RoleId = 2 },
                        new { UserId = 3, Email = "journalist1@test.com", FirstName = "Jour", LastName = "Journalist", Password = "RMBpGHDz5e41BhIsekwBNrMvKodcMVIfXUKi4CksVkA=", RoleId = 3 }
                    );
                });

            modelBuilder.Entity("NewsApp.Domain.Entities.Article", b =>
                {
                    b.HasOne("NewsApp.Domain.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId");

                    b.HasOne("NewsApp.Domain.Entities.User", "Journalist")
                        .WithMany("Articles")
                        .HasForeignKey("JournalistUserId");
                });

            modelBuilder.Entity("NewsApp.Domain.Entities.Comment", b =>
                {
                    b.HasOne("NewsApp.Domain.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId");

                    b.HasOne("NewsApp.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("NewsApp.Domain.Entities.User", b =>
                {
                    b.HasOne("NewsApp.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
